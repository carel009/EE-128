#include "fsl_device_registers.h"
#include <stdint.h>

void PORTA_IRQHandler(void) {
NVIC_ClearPendingIRQ(PORTA_IRQn); /* Clear pending interrupts */
GPIOB_PTOR |= 0x100000; /* Toggle */
PORTA_ISFR = (1 << 1); /* Clear ISFR for PORTA, Pin 1*/
}

unsigned short ADC_read16b(void)
{
	ADC0_SC1A = 0x00; //Write to SC1A to start conversion from ADC_0
	while(ADC0_SC2 & ADC_SC2_ADACT_MASK); // Conversion in progress
	while(!(ADC0_SC1A & ADC_SC1_COCO_MASK)); // Until conversion complete
	return ADC0_RA;
}

void main(void) {

	SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; /* Enable Port B Clock Gate Control*/
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; /* Enable Port C Clock Gate Control*/
	PORTB_GPCLR = 0x0E0C0100; /* Configures Pins 2-3 and 9-11 on Port B to be GPIO */
	PORTB_GPCHR = 0x001C0100; /* Configures Pins 18-20 on Port B to be GPIO */
	PORTC_GPCLR = 0x01BF0100; /* Configures Pins 0-5 and 7-8 on Port C to be GPIO */
	PORTC_GPCHR = 0x00030100; /* Configures Pins 16-17 on Port C to be GPIO */
	GPIOB_PDDR = 0x001C0E0C; /* Configures Pins 2-3 and 9-11 and 18-20 of Port B as Output */
	GPIOC_PDDR = 0x000001BF; /* Configures Pins 0-5 and 7-8 on Port C to be Output and Pins 16-17 on Port C to be Input */

	SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; /* Enable Port A Clock Gate Control */
	PORTA_PCR1 = 0xA0100; /* Configure Port A pin 1 for GPIO and interrupt on falling edge */
	GPIOA_PDDR |= (0 << 1); /* PORTA[1] input mode */
	PORTA_ISFR = (1 << 1); /* Clear ISFR for Port A, Pin 1*/
	NVIC_EnableIRQ(PORTA_IRQn); /* Enable interrupts from Port A*/

	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK; /* Enable Port D Clock Gate Control*/
	PORTD_GPCLR = 0x00020100; /* Configures Pin 1 on Port D to be GPIO */
	GPIOD_PDDR = 0x0002; /* Configures Pin 1 of Port D as Output */

	SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK; // 0x8000000u; Enable ADC0 Clock
	ADC0_CFG1 = 0x0C; // 16bits ADC; Bus Clock
	ADC0_SC1A = 0x1F; // Disable the module, ADCH = 11111

	uint32_t outval = 0, outval2 = 0;
	int val = 0, val2 = 0;
	int count = 0, data = 0, value = 0;
	uint32_t MOD_SW = 0, CNT_DIR = 0;
	unsigned char decoder[10] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};

	while (1)
	{
		GPIOD_PTOR = 0x02; // Pin 1 on Port D toggled high
		for (int i = 0; i < 1000000; i++); // S/W Delay (~ 1 sec))

		//Read Port C
		MOD_SW = GPIOC_PDIR & 0x10000; /* Captures and stores bit 16 on Port C*/
		CNT_DIR = GPIOC_PDIR & 0x20000; /* Captures and stores bit 17 on Port C*/

		if(MOD_SW == 0x10000) //ADC Mode   //bit 16 on Port C switch up
		{
			count = 0;
			data = ADC_read16b();
			value = ((data - 65000)/16);

			if(value < 0) {value = 0;}

			val = (value / 10);
			val2 = (value % 10);
		}//Read from ADC and convert to decimal value; (e.g., ADC reads 0xFF, voltage is 1.6)

		if(MOD_SW == 0x00000) //Count Mode   //bit 16 on Port C switch down
		{
		if(CNT_DIR == 0x20000) {count++; } //count up to 99 and roll over to 0   //bit 17 on Port C switch up
		if(CNT_DIR == 0x00000) {count--;} //count down to 0 and roll over to 99   //bit 17 on Port C switch down

		if(count > 99) {count = 0;}
		if(count < 0) {count = 99;}

		val = (count / 10);
		val2 = (count % 10);
		}

		outval = decoder[val];
		outval2 = decoder[val2];
		if(MOD_SW == 0x10000) {GPIOC_PDOR = (outval & 0x3F) | (outval & 0xC0) << 1 | 0x100; /*1st 7 Segment LED*/}
		else {GPIOC_PDOR = (outval & 0x3F) | (outval & 0xC0) << 1; /*1st 7 Segment LED*/}
		GPIOB_PDOR = (outval2 & 0x03) << 2 | (outval2 & 0x1C) << 7 | (outval2 & 0xE0) << 13; //2nd 7 Segment LED
	}
}
