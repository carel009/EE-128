#include "fsl_device_registers.h"
#include <stdint.h>

unsigned int nr_overflows = 0;

void FTM3_IRQHandler(void) {
	nr_overflows++;
	uint32_t SC_VAL = FTM3_SC;
	FTM3_SC &= 0x7F; // clear TOF
}

void main(void) {
	SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; // Port B clock enable
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; // Port C clock enable
	SIM_SCGC3 |= SIM_SCGC3_FTM3_MASK; // FTM3 clock enable

	PORTC_PCR10 = 0x300; // Port C Pin 10 as FTM3_CH6 (ALT3)
	FTM3_MODE = 0x5; // Enable FTM3
	FTM3_MOD = 0xFFFF;
	FTM3_SC = 0x0F; // System clock / 128

	NVIC_EnableIRQ(FTM3_IRQn); // Enable FTM3 interrupts
	FTM3_SC |= 0x40; // Enable TOF

	PORTB_GPCLR = 0x0E0C0100; // Configures Pins 2-3 and 9-11 on Port B to be GPIO
	PORTB_GPCHR = 0x001C0100; // Configures Pins 18-20 on Port B to be GPIO
	PORTC_GPCLR = 0x01BF0100; // Configures Pins 0-5 and 7-8 on Port C to be GPIO
	GPIOB_PDDR = 0x001C0E0C; // Configures Pins 2-3 and 9-11 and 18-20 of Port B as Output
	GPIOC_PDDR = 0x000001BF; // Configures Pins 0-5 and 7-8 on Port C to be Output

	unsigned int pwt1, pwt2, pulse_width;
	unsigned int pt1, pt2, period;
	unsigned char decoder[10] = {0x7E, 0x30, 0x6D, 0x79, 0x33, 0x5B, 0x5F, 0x70, 0x7F, 0x7B};
	uint32_t outval = 0, outval2 = 0;
	int val = 0, val2 = 0, value = 0;

	while (1) {
		FTM3_C6SC = 0x4; // rising edge
		while(!(FTM3_C6SC & 0x80)); // wait for CHF
		FTM3_C6SC &= ~(1 << 7); // clear CHF
		pt1 = FTM3_C6V; // first edge

		while(!(FTM3_C6SC & 0x80)); // wait for CHF
		FTM3_C6SC = 0; // stop C6
		pt2 = FTM3_C6V; // second edge

		period = pt2 - pt1;

		FTM3_CNT = 0; nr_overflows = 0; // initialize counters
		FTM3_C6SC = 0x4; // rising edge
		while(!(FTM3_C6SC & 0x80)); // wait for CHF
		FTM3_C6SC &= ~(1 << 7); // clear CHF
		pwt1 = FTM3_C6V; // first edge

		FTM3_C6SC = 0x8; // falling edge
		while(!(FTM3_C6SC & 0x80)); // wait for CHF
		FTM3_C6SC = 0; // stop C6
		pwt2 = FTM3_C6V; // second edge

		if (pwt2 >= pwt1)
			{pulse_width = (nr_overflows << 16) + (pwt2 - pwt1);}

		else
			{pulse_width = ((nr_overflows - 1) << 16) + (pwt2 - pwt1);}

		value = (((pulse_width * 68)/period) - 1); // ( * 68 for arduino pin 11 @ 245) ( * 34 for arduino pin 9 @ 490)

		if(value > 99) {value = 99;}
		if(value < 0) {value = 0;}

		val = (value / 10);
		val2 = (value % 10);
		outval = decoder[val];
		outval2 = decoder[val2];

		GPIOC_PDOR = (outval & 0x3F) | (outval & 0xC0) << 1; // 1st 7 Segment LED
		GPIOB_PDOR = (outval2 & 0x03) << 2 | (outval2 & 0x1C) << 7 | (outval2 & 0xE0) << 13; // 2nd 7 Segment LED

		for (int i = 0; i < 1000000; i++); // S/W Delay (~ 1 sec)
	}
}
